// <auto-generated />
using System;
using BookLibraryApp.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BookLibraryApp.Migrations
{
    [DbContext(typeof(BookLibraryContext))]
    partial class BookLibraryContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("BookLibraryApp.Models.Bookratings", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnName("User-ID")
                        .HasColumnType("int");

                    b.Property<string>("Isbn")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ISBN")
                        .HasColumnType("varchar(13)")
                        .HasDefaultValueSql("''")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.Property<int>("BookRating")
                        .HasColumnName("Book-Rating")
                        .HasColumnType("int");

                    b.HasKey("UserId", "Isbn")
                        .HasName("PRIMARY");

                    b.ToTable("bookratings");
                });

            modelBuilder.Entity("BookLibraryApp.Models.Books", b =>
                {
                    b.Property<int>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("book-ID")
                        .HasColumnType("int");

                    b.Property<string>("BookAuthor")
                        .HasColumnName("Book-Author")
                        .HasColumnType("varchar(255)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.Property<string>("BookTitle")
                        .HasColumnName("Book-Title")
                        .HasColumnType("varchar(255)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.Property<string>("ImageUrlL")
                        .HasColumnName("Image-URL-L")
                        .HasColumnType("varchar(255)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_bin");

                    b.Property<string>("ImageUrlM")
                        .HasColumnName("Image-URL-M")
                        .HasColumnType("varchar(255)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_bin");

                    b.Property<string>("ImageUrlS")
                        .HasColumnName("Image-URL-S")
                        .HasColumnType("varchar(255)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_bin");

                    b.Property<string>("Isbn")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ISBN")
                        .HasColumnType("varchar(13)")
                        .HasDefaultValueSql("''")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_bin");

                    b.Property<string>("Publisher")
                        .HasColumnType("varchar(255)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.Property<uint?>("YearOfPublication")
                        .HasColumnName("Year-Of-Publication")
                        .HasColumnType("int unsigned");

                    b.HasKey("BookId")
                        .HasName("PRIMARY");

                    b.ToTable("books");
                });

            modelBuilder.Entity("BookLibraryApp.Models.Library", b =>
                {
                    b.Property<int>("LibraryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("library-ID")
                        .HasColumnType("int");

                    b.Property<int>("BookId")
                        .HasColumnName("book-ID")
                        .HasColumnType("int");

                    b.Property<DateTime>("Datecreated")
                        .HasColumnName("datecreated")
                        .HasColumnType("datetime");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnName("user-ID")
                        .HasColumnType("varchar(128)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.HasKey("LibraryId");

                    b.HasIndex("BookId")
                        .HasName("book-ID");

                    b.HasIndex("UserId")
                        .HasName("user-ID");

                    b.ToTable("library");
                });

            modelBuilder.Entity("BookLibraryApp.Models.Roles", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(128)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(256)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.HasKey("Id");

                    b.ToTable("roles");
                });

            modelBuilder.Entity("BookLibraryApp.Models.Userclaims", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(128)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("Id");

                    b.HasIndex("UserId")
                        .HasName("UserId");

                    b.ToTable("userclaims");
                });

            modelBuilder.Entity("BookLibraryApp.Models.Userlogins", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(128)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(128)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(128)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.HasKey("LoginProvider", "ProviderKey", "UserId")
                        .HasName("PRIMARY");

                    b.HasIndex("UserId")
                        .HasName("ApplicationUser_Logins");

                    b.ToTable("userlogins");
                });

            modelBuilder.Entity("BookLibraryApp.Models.Userroles", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(128)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(128)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.HasKey("UserId", "RoleId")
                        .HasName("PRIMARY");

                    b.HasIndex("RoleId")
                        .HasName("IdentityRole_Users");

                    b.ToTable("userroles");
                });

            modelBuilder.Entity("BookLibraryApp.Models.Users", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(128)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(256)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LockoutEndDateUtc")
                        .HasColumnType("datetime");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("varchar(256)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_0900_ai_ci");

                    b.HasKey("Id");

                    b.ToTable("users");
                });

            modelBuilder.Entity("BookLibraryApp.Models.Library", b =>
                {
                    b.HasOne("BookLibraryApp.Models.Books", "Book")
                        .WithMany("Library")
                        .HasForeignKey("BookId")
                        .HasConstraintName("library_ibfk_2")
                        .IsRequired();

                    b.HasOne("BookLibraryApp.Models.Users", "User")
                        .WithMany("Library")
                        .HasForeignKey("UserId")
                        .HasConstraintName("library_ibfk_1")
                        .IsRequired();
                });

            modelBuilder.Entity("BookLibraryApp.Models.Userclaims", b =>
                {
                    b.HasOne("BookLibraryApp.Models.Users", "User")
                        .WithMany("Userclaims")
                        .HasForeignKey("UserId")
                        .HasConstraintName("ApplicationUser_Claims")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookLibraryApp.Models.Userlogins", b =>
                {
                    b.HasOne("BookLibraryApp.Models.Users", "User")
                        .WithMany("Userlogins")
                        .HasForeignKey("UserId")
                        .HasConstraintName("ApplicationUser_Logins")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookLibraryApp.Models.Userroles", b =>
                {
                    b.HasOne("BookLibraryApp.Models.Roles", "Role")
                        .WithMany("Userroles")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("IdentityRole_Users")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookLibraryApp.Models.Users", "User")
                        .WithMany("Userroles")
                        .HasForeignKey("UserId")
                        .HasConstraintName("ApplicationUser_Roles")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
