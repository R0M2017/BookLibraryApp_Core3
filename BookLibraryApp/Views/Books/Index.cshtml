@model IEnumerable<Books>

@{
    ViewData["Title"] = "Index";
    Layout = "_Layout";
    var scannedISBN = 0;
}

<h1>Books</h1>
<br />
<div class="container-fluid">
    <div class="row">
        <div class="col-sm">
            <div class="row p-2">
                <div class="col-2">
                    <a asp-controller="Home" asp-action="Index">Home</a>
                </div>
                <div class="col-sm">
                    <a asp-controller="Camera" asp-action="Capture">Scan Book</a>
                </div>
                <div class="col-sm">
                    <style>
                        /* In order to place the tracking correctly */
                        canvas.drawing, canvas.drawingBuffer {
                            position: absolute;
                            left: 0;
                            top: 0;
                        }
                    </style>

                    <!-- Div to show the scanner -->
                    <div id="scanner-container"></div>
                    <input type="button" id="btn" value="Start/Stop the scanner" />

                    <!-- Include the image-diff library -->
                    <script src="~/lib/quagga/quagga.min.js"></script>

                    <!-- Include JSON file -->
                    <script type="text/javascript" src="~/json/isbnStorage.json"></script>
                    <form>
                        <script>
                            var _scannerIsRunning = false;
                            var scannerISBN = new Array();

                            function startScanner() {
                                Quagga.init({
                                    inputStream: {
                                        name: "Live",
                                        type: "LiveStream",
                                        target: document.querySelector('#scanner-container'),
                                        constraints: {
                                            width: 480,
                                            height: 320,
                                            facingMode: "environment"
                                        },
                                    },
                                    decoder: {
                                        readers: [
                                            "ean_reader"
                                        ],
                                        debug: {
                                            showCanvas: true,
                                            showPatches: true,
                                            showFoundPatches: true,
                                            showSkeleton: true,
                                            showLabels: true,
                                            showPatchLabels: true,
                                            showRemainingPatchLabels: true,
                                            boxFromPatches: {
                                                showTransformed: true,
                                                showTransformedBox: true,
                                                showBB: true
                                            }
                                        }
                                    },
                                }, (err) => {
                                    if (err) {
                                        console.log(err);
                                        return
                                    }
                                    console.log("Initialization finished. Ready to start");
                                    Quagga.start();
                                    // Set flag to is running
                                    _scannerIsRunning = true;
                                });
                                Quagga.onProcessed((result) => {
                                    var drawingCtx = Quagga.canvas.ctx.overlay,
                                        drawingCanvas = Quagga.canvas.dom.overlay;
                                    if (result) {
                                        if (result.boxes) {
                                            drawingCtx.clearRect(0, 0, parseInt(drawingCanvas.getAttribute("width")), parseInt(drawingCanvas.getAttribute("height")));
                                            result.boxes.filter((box) => {
                                                return box !== result.box;
                                            }).forEach((box) => {
                                                Quagga.ImageDebug.drawPath(box, { x: 0, y: 1 }, drawingCtx, { color: "green", lineWidth: 2 });
                                            });
                                        }
                                        if (result.box) {
                                            Quagga.ImageDebug.drawPath(result.box, { x: 0, y: 1 }, drawingCtx, { color: "#00F", lineWidth: 2 });
                                        }
                                        if (result.codeResult && result.codeResult.code) {
                                            Quagga.ImageDebug.drawPath(result.line, { x: 'x', y: 'y' }, drawingCtx, { color: 'red', lineWidth: 3 });
                                        }
                                    }
                                });
                                Quagga.onDetected((result) => {
                                    var isbn = result.codeResult.code;
                                    scannerISBN.push(isbn);
                                    if (scannerISBN.length == 20) {
                                        var modeISBN = mode(scannerISBN);
                                        console.log("ISBN: " + modeISBN);
                                        $('#options.isbn').val(modeISBN);
                                    }
                                });
                            }
                            // Start/stop scanner
                            document.getElementById("btn").addEventListener("click", () => {
                                if (_scannerIsRunning) {
                                    Quagga.stop();
                                } else {
                                    startScanner();
                                }
                            }, false);

                            function mode(array) {
                                if (array.length == 0)
                                    return null;
                                var modeMap = {};
                                var maxEl = array[0], maxCount = 1;
                                for (var i = 0; i < array.length; i++) {
                                    var el = array[i];
                                    if (modeMap[el] == null)
                                        modeMap[el] = 1;
                                    else
                                        modeMap[el]++;
                                    if (modeMap[el] > maxCount) {
                                        maxEl = el;
                                        maxCount = modeMap[el];
                                    }
                                }
                                return maxEl;
                            }
                        </script>
                        <!--
                        <div class="row m-1">
                            <div class="col"></div>
                            <div class="col-1">
                                <label class="col-form-label">ISBN Search</label>
                            </div>
                            <div class="col-3">
                                <select form="pageform" name="options.searchisbn"
                                        class="form-control" hidden>
                                    <option value="ISBN" selected="">
                                        ISBN
                                    </option>
                                </select>
                            </div>
                            <div class="col">
                                <input form="pageform" class="form-control" name="options.isbn" />
                            </div>
                            <div class="col-1 text-right">
                                <button form="pageform" class="btn btn-secondary" type="submit">
                                    Search ISBN
                                </button>
                            </div>
                            <div class="col"></div>
                        </div>
                            -->
                    </form>
                </div>
            </div>
        </div>
        <div class="text-center">
            @{
                ViewBag.searches = new string[] { "BookTitle", "BookAuthor", "Publisher" };
                ViewBag.sorts = new string[] { "BookTitle", "BookAuthor",
            "Publisher", "YearOfPublication"};
            }
            <!--<partial name="PageOptions" model="Model" />-->
            @await Html.PartialAsync("PageOptions", Model)
        </div>
        <br />
        <hr />
        <div class="bg-dark">
            <br />
            <br />
            @if (ViewBag.UpdateAll != true)
            {
                <div class="text-center">
                    <a asp-action="UpdateAll" class="btn btn-primary">Edit All</a>
                </div>
                @if (Model.Count() == 0)
                {
                    <div class="row placeholder justify-content-center">
                        <div class="col text-center p-2">No Books</div>
                    </div>
                }
                else
                {
                    <div class="row justify-content-center">
                        <br />
                        <form asp-action="AddBook" method="post">
                            <div class="card m-2" style="width: 16rem;">
                                <div class="card-img-top bg-warning">
                                    Small Image<input name="ImageUrlS" class="form-control" />
                                    Medium Image<input name="ImageUrlM" class="form-control" />
                                    Large Image<input name="ImageUrlL" class="form-control" />
                                </div>
                                <div class="card-body">
                                    <h5 class="card-title">
                                        <b>Title: </b><input name="BookTitle" class="form-control" />
                                    </h5>
                                    <p class="card-text">
                                        <b>Author: </b><input name="BookAuthor" class="form-control" />
                                    </p>
                                </div>
                                <ul class="list-group list-group-flush">
                                    <li class="list-group-item">
                                        <b>Publisher: </b><input name="Publisher" class="form-control" />
                                    </li>
                                    <li class="list-group-item">
                                        <b>Year Published: </b><input name="YearOfPublication" class="form-control" />
                                    </li>
                                    <li class="list-group-item">
                                        <b>ISBN: </b><input name="Isbn" class="form-control" />
                                    </li>
                                    <li class="list-group-item">
                                        <button type="submit" class="btn btn-primary">Add</button>
                                    </li>
                                </ul>
                            </div>
                        </form>
                        @foreach (Books b in Model)
                        {
                            <br />
                            <div class="card m-2" style="width: 16rem;">
                                <img class="card-img-top bg-warning"
                                     srcset="@b.ImageUrlS 200w,
                            @b.ImageUrlM 400w,
                            @b.ImageUrlL 600w"
                                     sizes="(max-width: 600px) 200px, 400px, 600px"
                                     src="@b.ImageUrlS" alt="Book Image"
                                     onerror="this.onerror = null; this.src = '~/img/NoPicture.jpg';">
                                <div class="card-body">
                                    <h5 class="card-title"><b>Title: </b>@b.BookTitle</h5>
                                    <p class="card-text"><b>Author: </b>@b.BookAuthor</p>
                                </div>
                                <ul class="list-group list-group-flush">
                                    <li class="list-group-item"><b>Publisher: </b>@b.Publisher</li>
                                    <li class="list-group-item"><b>Year Published: </b>@b.YearOfPublication</li>
                                    <li class="list-group-item"><b>ISBN: </b>@b.Isbn</li>
                                    <li class="list-group-item">
                                        <form asp-action="Delete" method="post">
                                            <a asp-action="UpdateBook" asp-route-bookid="@b.BookId" class="btn btn-outline-primary">
                                                Edit
                                            </a>
                                            <input type="hidden" name="bookid" value="@b.BookId" />
                                            <button type="submit" class="btn btn-outline-danger">
                                                Delete
                                            </button>
                                        </form>
                                    </li>
                                </ul>
                                <!--       <div class="card-body">
                                        <a href="#" class="card-link">Card link</a>
                                        <a href="#" class="card-link">Another link</a>
                                    </div>
                                -->
                            </div>
                            <br />
                        }
                    </div>
                }
            }
            else
            {
                <!--<partial name="InlineEditor" model="Model" />-->
                @await Html.PartialAsync("InlineEditor", Model)
            }
            <br />
            <br />
        </div>
        <hr />
        <br />
        <div class="text-center">
            <!--<partial name="Pages" model="Model" />-->
            @await Html.PartialAsync("Pages", Model)
        </div>
        <br />
    </div>
</div>