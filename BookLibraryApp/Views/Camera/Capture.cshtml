
@{
    ViewData["Title"] = "Index";
    Layout = "_Layout";
}


<style>
    /* In order to place the tracking correctly */
    canvas.drawing, canvas.drawingBuffer {
        position: absolute;
        left: 0;
        top: 0;
    }
</style>

<!-- Div to show the scanner -->
<div id="scanner-container"></div>
<input type="button" id="btn" value="Start/Stop the scanner" />

<!-- Include the image-diff library -->
<script src="~/lib/quagga/quagga.min.js"></script>

<!-- Include JSON file -->
<script type="text/javascript" src="~/json/isbnStorage.json"></script>

<script>
    var _scannerIsRunning = false;
    var scannerISBN = new Array();

    function startScanner() {
        Quagga.init({
            inputStream: {
                name: "Live",
                type: "LiveStream",
                target: document.querySelector('#scanner-container'),
                constraints: {
                    width: 480,
                    height: 320,
                    facingMode: "environment"
                },
            },
            decoder: {
                readers: [
                    "ean_reader"
                ],
                debug: {
                    showCanvas: true,
                    showPatches: true,
                    showFoundPatches: true,
                    showSkeleton: true,
                    showLabels: true,
                    showPatchLabels: true,
                    showRemainingPatchLabels: true,
                    boxFromPatches: {
                        showTransformed: true,
                        showTransformedBox: true,
                        showBB: true
                    }
                }
            },
        }, (err) => {
            if (err) {
                console.log(err);
                return
            }
            console.log("Initialization finished. Ready to start");
            Quagga.start();
            // Set flag to is running
            _scannerIsRunning = true;
        });
        Quagga.onProcessed((result) => {
            var drawingCtx = Quagga.canvas.ctx.overlay,
                drawingCanvas = Quagga.canvas.dom.overlay;
            if (result) {
                if (result.boxes) {
                    drawingCtx.clearRect(0, 0, parseInt(drawingCanvas.getAttribute("width")), parseInt(drawingCanvas.getAttribute("height")));
                    result.boxes.filter((box) => {
                        return box !== result.box;
                    }).forEach((box) => {
                        Quagga.ImageDebug.drawPath(box, { x: 0, y: 1 }, drawingCtx, { color: "green", lineWidth: 2 });
                    });
                }
                if (result.box) {
                    Quagga.ImageDebug.drawPath(result.box, { x: 0, y: 1 }, drawingCtx, { color: "#00F", lineWidth: 2 });
                }
                if (result.codeResult && result.codeResult.code) {
                    Quagga.ImageDebug.drawPath(result.line, { x: 'x', y: 'y' }, drawingCtx, { color: 'red', lineWidth: 3 });
                }
            }
        });
        Quagga.onDetected((result) => {
            // var isbn = result.codeResult.code;

            /*$.getJSON("/json/isbnStorage.json", (data) => {
                data.isbnScanned.push({ isbn: isbn });
                JSON.stringify(data);
            })*/

           /* $.getJSON("/json/isbnStorage.json", (data) => {
                var scannedisbn = result.codeResult.code;
                //for (var i = 0; i < data.length; i++) {
                    data.isbnScanned.push({ isbn: scannedisbn });
                console.log("ISB Scanned : [" + scannedisbn + "]", result);
                //}
                console.log("Barcode detected and processed : [" + scannedisbn + "]", result);
            });*/


            /*var data = JSON.parse("/json/isbnStorage.json");
            data.isbnScanned.push({ isbn: isbn });
            JSON.stringify(data);*/

            /*var jsonObject = JSON.parse(isbnStorage);
            jsonObject.isbnScanned.push({
                isbn: isbn
            })*/

            var isbn = result.codeResult.code;
            scannerISBN.push(isbn);
            if (scannerISBN.length == 20) {
                var modeISBN = mode(scannerISBN);

                $.ajax({
                type: "POST",
                url: "@Url.Action("InsertISBN", "Camera")",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                data: JSON.stringify(modeISBN),
                success: () => {
                    console.log("Recording ISBN: " + isbn);
                },
                error: () => {
                    console.log("Error Recording ISBN: " + isbn);
                    }
                });
            }

            //var jsonstorage = JSON.parse(isbnStorage);

            /*$.getJSON("/json/isbnStorage.json", (data) => {
                $.each(data, (index, value) => {

                    console.log(value);
                });
            });*/



            /*$.post("/json/isbnStorage.json", (data) => {
                $("")
            });*/


            // console.log("Barcode detected and processed : [" + isbn + "]", result);


        });
    }
    // Start/stop scanner
    document.getElementById("btn").addEventListener("click", () => {
        if (_scannerIsRunning) {
            Quagga.stop();
        } else {
            startScanner();
        }
    }, false);

    function mode(array) {
        if (array.length == 0)
            return null;
        var modeMap = {};
        var maxEl = array[0], maxCount = 1;
        for (var i = 0; i < array.length; i++) {
            var el = array[i];
            if (modeMap[el] == null)
                modeMap[el] = 1;
            else
                modeMap[el]++;
            if (modeMap[el] > maxCount) {
                maxEl = el;
                maxCount = modeMap[el];
            }
        }
        return maxEl;
    }
</script>

<!--
<a href="#" id="scanbook">Scan ISBN</a>
<div id="dialog" title="Scanner">
    <div id="my_camera"></div>
    <br />
    <form>
        <input type="button" class="btn btn-success" value="Take Snapshot" onClick="take_snapshot()">
    </form>
    <div id="results">Your captured image will appear here...</div>
</div>
<script src="~/js/webcamsettings.js"></script>
    -->
